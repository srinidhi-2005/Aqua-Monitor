import React from "react";
import { AiOutlineClose } from "react-icons/ai";
import { FiDownload } from "react-icons/fi";
import { DropletIcon, AlertTriangle, CheckCircle } from "lucide-react";
import jsPDF from "jspdf";

const Results = ({ result, darkMode, isOpen, onClose, lakeName, previewUrl }) => {
  if (!result || !isOpen) return null;

  const prediction = result.prediction;
  const status = prediction === 1 ? "Good Quality" : "Poor Quality";
  const date = new Date().toLocaleString();

  const handleDownload = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;

    // Background
    doc.setFillColor(darkMode ? 35 : 255, darkMode ? 41 : 255, darkMode ? 49 : 255);
    doc.rect(0, 0, pageWidth, pageHeight, 'F');

    // Header background
    doc.setFillColor(darkMode ? 45 : 245, darkMode ? 51 : 247, darkMode ? 59 : 250);
    doc.rect(0, 0, pageWidth, 40, 'F');

    // Title
    doc.setTextColor(darkMode ? 229 : 31, darkMode ? 231 : 41, darkMode ? 235 : 55);
    doc.setFontSize(24);
    doc.setFont(undefined, 'bold');
    doc.text("Water Quality Analysis Report", 20, 25);

    // Date
    doc.setFontSize(10);
    doc.setTextColor(darkMode ? 156 : 107, darkMode ? 163 : 114, darkMode ? 175 : 128);
    doc.text(date, pageWidth - 20, 25, { align: 'right' });

    // Lake Information Section
    doc.setFontSize(16);
    doc.setFont(undefined, 'bold');
    doc.setTextColor(darkMode ? 229 : 31, darkMode ? 231 : 41, darkMode ? 235 : 55);
    doc.text("Location Details", 20, 50);

    // Lake info box
    doc.setDrawColor(darkMode ? 75 : 209, darkMode ? 85 : 213, darkMode ? 99 : 219);
    doc.setFillColor(darkMode ? 55 : 249, darkMode ? 65 : 250, darkMode ? 81 : 251);
    doc.roundedRect(20, 55, 170, 40, 3, 3, 'FD');

    doc.setFontSize(12);
    doc.setFont(undefined, 'normal');
    doc.text(`Lake Name: ${lakeName}`, 30, 70);

    // Image (if available)
    if (previewUrl) {
      try {
        doc.addImage(previewUrl, 'JPEG', 20, 105, 170, 80, undefined, 'MEDIUM');
        
        // Add image caption
        doc.setFontSize(10);
        doc.setTextColor(darkMode ? 156 : 107, darkMode ? 163 : 114, darkMode ? 175 : 128);
        doc.text("Water Sample Image", 20, 195, { align: 'left' });
      } catch (error) {
        console.error("Error adding image to PDF:", error);
      }
    }

    // Results Section
    const resultsY = previewUrl ? 210 : 105;

    // Results header
    doc.setFontSize(16);
    doc.setFont(undefined, 'bold');
    doc.setTextColor(darkMode ? 229 : 31, darkMode ? 231 : 41, darkMode ? 235 : 55);
    doc.text("Analysis Results", 20, resultsY);

    // Results box
    const statusColor = prediction === 1 
      ? { r: 34, g: 197, b: 94 }  // green
      : { r: 239, g: 68, b: 68 }; // red

    doc.setDrawColor(statusColor.r, statusColor.g, statusColor.b);
    doc.setFillColor(statusColor.r, statusColor.g, statusColor.b, 0.1);
    doc.roundedRect(20, resultsY + 5, 170, 50, 3, 3, 'FD');

    // Status text
    doc.setFontSize(24);
    doc.setTextColor(statusColor.r, statusColor.g, statusColor.b);
    doc.text(status, 30, resultsY + 35);

    // Footer
    doc.setFontSize(8);
    doc.setTextColor(darkMode ? 156 : 107, darkMode ? 163 : 114, darkMode ? 175 : 128);
    doc.text("Generated by Water Quality Analysis System", pageWidth/2, pageHeight - 10, { align: 'center' });

    doc.save("water-quality-analysis.pdf");
  };

  const QualityIndicator = () => (
    <div className={`relative w-48 h-48 mb-6`}>
      <div className={`absolute inset-0 rounded-full ${
        darkMode ? "bg-gray-700" : "bg-gray-100"
      } animate-pulse duration-2000`} />
      <div className="absolute inset-0 flex items-center justify-center flex-col">
        {prediction === 1 ? (
          <CheckCircle className="w-16 h-16 text-green-500 mb-2" />
        ) : (
          <AlertTriangle className="w-16 h-16 text-red-500 mb-2" />
        )}
        <span className={`text-2xl font-bold ${
          prediction === 1 ? "text-green-500" : "text-red-500"
        }`}>
          {status}
        </span>
      </div>
    </div>
  );

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className={`relative w-full max-w-2xl rounded-2xl shadow-2xl ${
        darkMode ? "bg-gray-800 text-gray-200" : "bg-white text-gray-800"
      } overflow-hidden`}>
        {/* Header */}
        <div className={`p-6 border-b ${
          darkMode ? "border-gray-700" : "border-gray-200"
        }`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <DropletIcon className={`w-8 h-8 ${
                prediction === 1 ? "text-green-500" : "text-red-500"
              }`} />
              <h2 className="text-2xl font-bold">Water Quality Analysis</h2>
            </div>
            <button
              onClick={onClose}
              className={`p-2 rounded-full transition-colors ${
                darkMode 
                  ? "hover:bg-gray-700 text-gray-400 hover:text-gray-200" 
                  : "hover:bg-gray-100 text-gray-500 hover:text-gray-700"
              }`}
            >
              <AiOutlineClose size={24} />
            </button>
          </div>
          <div className={`mt-2 text-sm ${
            darkMode ? "text-gray-400" : "text-gray-500"
          }`}>
            Analysis completed on {date}
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          <div className="flex flex-col md:flex-row gap-6">
            <div className="flex-1">
              <QualityIndicator />
              <div className={`p-4 rounded-lg ${
                darkMode ? "bg-gray-700" : "bg-gray-50"
              }`}>
                <h3 className="text-lg font-semibold mb-2">Location Details</h3>
                <div className={`text-sm ${
                  darkMode ? "text-gray-300" : "text-gray-600"
                }`}>
                  <p className="mb-2">Lake Name: {lakeName}</p>
                </div>
              </div>
            </div>

            {previewUrl && (
              <div className="flex-1">
                <div className="relative group">
                  <img 
                    src={previewUrl} 
                    alt="Lake water" 
                    className="w-full h-64 object-cover rounded-lg shadow-lg transition-transform duration-300 group-hover:scale-[1.02]" 
                  />
                  <div className={`absolute inset-0 rounded-lg ${
                    prediction === 1 
                      ? "bg-gradient-to-t from-green-500/50" 
                      : "bg-gradient-to-t from-red-500/50"
                  } to-transparent opacity-60`} />
                </div>
              </div>
            )}
          </div>

          <div className="mt-8 flex justify-end">
            <button
              onClick={handleDownload}
              className={`px-6 py-3 rounded-lg font-semibold flex items-center gap-2 
                transform transition-all duration-200 hover:scale-105 ${
                darkMode 
                  ? "bg-blue-600 hover:bg-blue-700" 
                  : "bg-blue-500 hover:bg-blue-600"
                } text-white shadow-lg hover:shadow-xl`}
            >
              <FiDownload size={20} />
              Download Report
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Results;